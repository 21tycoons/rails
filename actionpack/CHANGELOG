*CVS*

* Added select, collection_select, and country_select to make it easier for Active Records to set attributes through
  drop-down lists of options. Example:
  
    <%= select "person", "gender", %w( Male Female ) %>
    
  ...would give the following:
  
    <select name="person[gender]" id="person_gender"><option>Male</option><option>Female</option></select>

* Added an option for getting multiple values on a single form name into an array instead of having the last one overwrite.
  This is especially useful for groups of checkboxes, which can now be written as:
  
    <input type="checkbox" name="rights[]" value="CREATE" />
    <input type="checkbox" name="rights[]" value="UPDATE" />
    <input type="checkbox" name="rights[]" value="DELETE" />
  
  ...and retrieved in the controller action with:
  
    @params["rights"] # => [ "CREATE", "UPDATE", "DELETE" ]
  
  The old behavior (where the last one wins, "DELETE" in the example) is still available. Just don't add "[]" to the 
  end of the name. [Scott Baron]
  
* Added send_file which uses the new render_text block acceptance to make it feasible to send large files.
  The files is sent with a bunch of voodoo HTTP headers required to get arbitrary files to download as 
  expected in as many browsers as possible (eg, IE hacks). Example:
  
  def play_movie
    send_file "/movies/that_movie.avi"
  end
  
  [Jeremy Kemper]

* render_text now accepts a block for deferred rendering. Useful for streaming large files, displaying 
  a “please wait” message during a complex search, etc. Streaming example:
  
    render_text do |response|
      File.open(path, 'rb') do |file|
        while buf = file.read(1024)
          print buf 
        end 
      end
    end
  
  [Jeremy Kemper]

* Added a new Tag Helper that can generate generic tags programmatically insted of through HTML. Example:
    
    tag("br", "clear" => "all") => <br clear="all" />
  
  ...that's usually not terribly interesting (unless you have a lot of options already in a hash), but it 
  gives way for more specific tags, like the new form tag:
  
    form_tag({ :controller => "weblog", :action => "update" }, { :multipart => "true", "style" => "width: 200px"}) =>
      <form action="/weblog/update" enctype="multipart/formdata" style="width: 200px">
    
  There's even a "pretty" version for people who don't like to open tags in code and close them in HTML:
  
    <%= start_form_tag :action => "update" %>
      # all the input fields
    <%= end_form_tag %>
  
  (end_form_tag just returns "</form>")

* The selected parameter in options_for_select may now also an array of values to be selected when 
  using a multiple select. Example:

    options_for_select([ "VISA", "Mastercard", "Discover" ], ["VISA", "Discover"]) =>
      <option selected>VISA</option>\n<option>Mastercard</option>\n<option selected>Discover</option>
      
  [Scott Baron]

* Changed the URL rewriter so controller_prefix and action_prefix can be used in isolation. You can now do:

    url_for(:controller_prefix => "clients")

  ...or:
  
    url_for(:action_prefix => "category/messages")

  Neither would have worked in isolation before (:controller_prefix required a :controller and :action_prefix required an :action)

* Started process of a cleaner separation between Action Controller and ERb-based Action Views by introducing an
  abstract base class for views. And Amita adapter could be fitted in more easily now.

* The date helper methods date_select and datetime_select now also use the field error wrapping 
  (div with class fieldWithErrors by default).

* The date helper methods date_select and datetime_select can now discard selects

* Added option on AbstractTemplate to specify a different field error wrapping. Example:

    ActionView::AbstractTemplate.field_error_proc = Proc.new do |html, instance|
      "<p>#{instance.method_name + instance.error_message}</p><div style='background-color: red'>#{html}</div>"
    end

  ...would give the following on a Post#title (text field) error:
  
    <p>Title can't be empty</p>
    <div style='background-color: red'>
      <input id="post_title" name="post[title]" size="30" type="text" value="Hello World" />
    </div>

* The UrlHelper methods url_for and link_to will now by default only return paths, not complete URIs.
  That should make it easier to fit a Rails application behind a proxy or load-balancer.
  You can overwrite this by passing :only_path => false as part of the options. [Suggested by U235]

* Fixed bug with having your own layout for use with scaffolding [Kevin Radloff]

* Fixed bug where redirect_to_path didn't append the port on non-standard ports [dhawkins]

* Scaffolding plays nicely with single-table inheritance (LoadErrors are caught) [Jeremy Kemper]

* Scaffolding plays nice with plural models like Category/categories [Jeremy Kemper]

* Fixed missing suffix appending in scaffolding [Kevin Radloff]


*0.7.9*

* The "form" method now present boolean fields from PostgreSQL as drop-down menu. [Scott]

* Scaffolding now automatically attempts to require the class that's being scaffolded.

* Scaffolding will use the current active layout, instead of its own, if one has been specified. Example:

    class WeblogController < ActionController::Base
      layout "layouts/weblog"
      scaffold :post
    end
  
  [Suggested by Scott]

* Changed url_for (and all the that drives, like redirect_to, link_to, link_for) so you can pass it a symbol instead of a hash.
  This symbol is a method reference which is then called to calculate the url. Example:
  
    class WeblogController < ActionController::Base
      def update
        # do some update
        redirect_to :dashboard_url
      end
      
      protected
        def dashboard_url
          if @project.active?
            url_for :controller => "project", :action => "dashboard"
          else
            url_for :controller => "account", :action => "dashboard"
          end
        end
    end
      
* Added default_url_options to specialize behavior for all url_for (and friends) calls:

    Overwrite to implement a number of default options that all url_for-based methods will use. 
    The default options should come in form of a hash, just like the one you would use for 
    url_for directly. Example:
    
      def default_url_options(options)
        { :controller_prefix => @project.active? ? "projects/" : "accounts/" }
      end
    
    As you can infer from the example, this is mostly useful for situations where you want to 
    centralize dynamic dissions about the urls as they stem from the business domain. Please note
    that any individual url_for call can always override the defaults set by this method.
    

* Changed url_for so that an "id" passed in the :params is not treated special. You need to use the dedicated :id to get 
  the special auto path-params treatment. Considering the url http://localhost:81/friends/list

    url_for(:action => "show", :params => { "id" => 5 })
      ...used to give http://localhost:81/friends/show/5
      ......now gives http://localhost:81/friends/show?id=5

    If you want the automated id behavior, do:

    url_for(:action => "show", :id => 5 )
      ....which gives http://localhost:81/friends/show/5


* Fixed problem with anchor being inserted before path parameters with url_for (and friends)


*0.7.8*

* Fixed session bug where you couldn't store any objects that didn't exist in the standard library 
  (such as Active Record objects).

* Added reset_session method for Action Controller objects to clear out all objects in the session.

* Fixed that exceptions raised during filters are now also caught by the default rescues

* Added new around_filter for doing before and after filtering with a single object [Florian Weber]:

    class WeblogController < ActionController::Base
      around_filter BenchmarkingFilter.new
      
      # Before this action is performed, BenchmarkingFilter#before(controller) is executed
      def index
      end
      # After this action has been performed, BenchmarkingFilter#after(controller) is executed
    end
    
    class BenchmarkingFilter
      def initialize
        @runtime
      end
      
      def before
        start_timer
      end
      
      def after
        stop_timer
        report_result
      end
    end

* Added the options for specifying a different name and id for the form helper methods than what is guessed [Florian Weber]:

    text_field "post", "title"
      ...just gives: <input id="post_title" name="post[title]" size="30" type="text" value="" />
      
    text_field "post", "title", "id" => "title_for_post", "name" => "first_post_title"
      ...can now give: <input id="title_for_post" name="first_post_title" size="30" type="text" value="" />

* Added DebugHelper with a single "debug" method for doing pretty dumps of objects in the view
  (now used in the default rescues to better present the contents of session and template variables)

* Added note to log about the templates rendered within layouts (before just the layout was shown)

* Fixed redirects on https setups [Andreas]

* Fixed scaffolding problem on the edit action when using :suffix => true [Scott]

* Fixed scaffolding problem where implementing list.rhtml wouldn't work for the index action

* URLs generated now uses &amp; instead of just & so pages using it can validate with W3C [Spotted by Andreas]


*0.7.7*

* Fixed bug in CGI extension that prevented multipart forms from working


*0.7.6*

* Included ERB::Util so all templates can easily escape HTML content with <%=h @person.content %>

* All requests are now considered local by default, so everyone will be exposed to detailed debugging screens on errors.
  When the application is ready to go public, set ActionController::Base.consider_all_requests_local to false, 
  and implement the protected method local_request? in the controller to determine when debugging screens should be shown.

* Fixed three bugs with the url_for/redirect_to/link_to handling. Considering the url http://localhost:81/friends/show/1

    url_for(:action => "list")
      ...used to give http://localhost:81/friends/list/1
      ......now gives http://localhost:81/friends/list
    
    url_for(:controller => "friends", :action => "destroy", :id => 5)
      ...used to give http://localhost:81/friends/destroy
      ......now gives http://localhost:81/friends/destroy/5

  Considering the url http://localhost:81/teachers/show/t

    url_for(:action => "list", :id => 5)
      ...used to give http://localhost:81/5eachers/list/t
      ......now gives http://localhost:81/teachers/list/5
  
  [Reported by David Morton & Radsaq]

* Logs exception to logfile in addition to showing them for local requests

* Protects the eruby load behind a begin/rescue block. eRuby is not required to run ActionController.

* Fixed install.rb to also install clean_logger and the templates

* Added ActiveRecordStore as a session option. Read more in lib/action_controller/session/active_record_store.rb [Tim Bates]

* Change license to MIT License (and included license file in package)

* Application error page now returns status code 500 instead of 200

* Fixed using Procs as layout handlers [Florian Weber]

* Fixed bug with using redirects ports other than 80

* Added index method that calls list on scaffolding


*0.7.5*

* First public release